show databases;
use sakila;
show tables;
/*Q1. Write a query to display the first name, last name, and rental date of all customers who rented a film. 
Use the customer and rental tables.*/
SELECT c.first_name, c.last_name, r.rental_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id;
/*Q2. Write a query to display the first name, last name, and address of all customers whose district is either Alberta or Texas.
Use the customer and address tables.*/
SELECT c.first_name, c.last_name, a.address
FROM customer c
JOIN address a ON c.address_id = a.address_id
WHERE a.district IN ('Alberta', 'Texas');

/*Q3. List all films along with their category names, including films that may not belong to any category. 
Then sort it by category names. Use the film, film_category and category tables*/

SELECT f.title, c.name AS category_name
FROM film f
LEFT JOIN film_category fc ON f.film_id = fc.film_id
LEFT JOIN category c ON fc.category_id = c.category_id
ORDER BY c.name;

/*Q4. Display the number of rentals per store. Use the rental, inventory, and store tables.*/

SELECT s.store_id, COUNT(r.rental_id) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id;

/*Q5. List the names of categories that have more than 50 films. Use table category and film_category.*/

SELECT c.name AS category_name
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
GROUP BY c.name
HAVING COUNT(fc.film_id) > 50;

/*Q6. Write a query to display the film titles that have been rented by the customer named 'Mary Smith'. 
Use a subquery to get the customer ID.*/

SELECT f.title
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.customer_id = (SELECT customer_id FROM customer WHERE first_name = 'Mary' AND last_name = 'Smith');

/*Q7. Write a query to display the total rental income generated by each film. 
Use film, inventory, rental and payment tables.*/

SELECT f.title, SUM(p.amount) AS total_income
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY f.title;

/* Q8. Write a query to display the total number of films each actor has acted in. Use actor, film_Actor tables.*/
SELECT a.first_name, a.last_name, COUNT(fa.film_id) AS total_films
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY a.actor_id;

/* Q9. Write a query to list all rentals with a case statement that displays 'New Customer' 
if the customer_id is greater than 300, and 'Regular Customer' otherwise.Use table rental.*/
SELECT r.rental_id, r.customer_id,
       CASE 
           WHEN r.customer_id > 300 THEN 'New Customer'
           ELSE 'Regular Customer'
       END AS customer_type
FROM rental r;

/*Q10. Write a query to find all films with titles that start with the letter 'A'. 
Display the film title and the release year. Use film table and inventory table.*/
SELECT f.title, f.release_year
FROM film f
WHERE f.title LIKE 'A%';

/*Q11. Create a new DB and perform below operations using SQL commands.
(a)	Create a table with 2 columns â€“ Student_ID, Marks*/
CREATE DATABASE school;
USE school;

CREATE TABLE student_marks (
    Student_ID INT,
    Marks INT
);

/*11b) Insert 2 records in this table.*/
INSERT INTO student_marks (Student_ID, Marks)
VALUES (1, 85), (2, 88);

/* 11c) Rename the Marks column with Score.*/
ALTER TABLE student_marks
RENAME COLUMN Marks TO Score;

/*11d)Then delete the table.*/
DROP TABLE student_marks;

/* 11e)Then delete the Database.*/
DROP DATABASE school;
